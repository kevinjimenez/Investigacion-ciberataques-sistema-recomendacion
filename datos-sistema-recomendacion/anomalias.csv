item_id,anomalia,descripcion,criticidad,recomendacion
18,Improper Control of Generation of Code ('Code Injection'),"The software constructs all or part of a code segment using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the syntax or behavior of the intended code segment.",Medium,"Automatically scan your code to identify and remediate vulnerabilities. Compliant with the most stringent security standards, such as OWASP and CWE, Kiuwan Code Security covers all important languages and integrates with leading DevOps tools"
17,Improper Restriction of XML External Entity Reference,"The software processes an XML document that can contain XML entities with URIs that resolve to documents outside of the intended sphere of control, causing the product to embed incorrect documents into its output.",None,"The remediation of this flaw is highly dependent on the XMLParser you are using in your application. The risk of this flaw is a malicious user exploiting external entity references, and causing a external entity expansion attack. The remediation is to secure your parser to disallow this attack avenue. I recommend referencing this OWASP document, and matching up with what XML Parser you are using to remedy the flaw."
16,Unrestricted Upload of File with Dangerous Type,The software allows the attacker to upload or transfer files of dangerous types that can be automatically processed within the product's environment.,Medium,"    The file types allowed to be uploaded should be restricted to only those that are necessary for business functionality.
    Never accept a filename and its extension directly without having a whitelist filter.
    The application should perform filtering and content checking on any files which are uploaded to the server. Files should be thoroughly scanned and validated before being made available to other users. If in doubt, the file should be discarded.
    It is necessary to have a list of only permitted extensions on the web application. And, file extension can be selected from the list. For instance, it can be a “select case” syntax (in case of having VBScript) to choose the file extension in regards to the real file extension.
    All the control characters and Unicode ones should be removed from the filenames and their extensions without any exception. Also, the special characters such as “;”, “:”, “>”, “<”, “/” ,”\”, additional “.”, “*”, “%”, “$”, and so on should be discarded as well. If it is applicable and there is no need to have Unicode characters, it is highly recommended to only accept Alpha-Numeric characters and only 1 dot as an input for the file name and the extension; in which the file name and also the extension should not be empty at all (regular expression: [a-zA-Z0-9]{1,200}\.[a-zA-Z0-9]{1,10}).
    Limit the filename length. For instance, the maximum length of the name of a file plus its extension should be less than 255 characters (without any directory) in an NTFS partition.
    It is recommended to use an algorithm to determine the filenames. For instance, a filename can be a MD5 hash of the name of file plus the date of the day.
    Uploaded directory should not have any “execute” permission and all the script handlers should be removed from these directories.
    Limit the file size to a maximum value in order to prevent denial of service attacks (on file space or other web application’s functions such as the image resizer).
    Restrict small size files as they can lead to denial of service attacks. So, the minimum size of files should be considered.
    Use Cross Site Request Forgery protection methods.
    Prevent from overwriting a file in case of having the same hash for both.
    Use a virus scanner on the server (if it is applicable). Or, if the contents of files are not confidential, a free virus scanner website can be used. In this case, file should be stored with a random name and without any extension on the server first, and after the virus checking (uploading to a free virus scanner website and getting back the result), it can be renamed to its specific name and extension.
    Try to use POST method instead of PUT (or GET!)
    Log users’ activities. However, the logging mechanism should be secured against log forgery and code injection itself.
    In case of having compressed file extract functions, contents of the compressed file should be checked one by one as a new file.
    If it is possible, consider saving the files in a database rather than on the filesystem.
    If files should be saved in a filesystem, consider using an isolated server with a different domain to serve the uploaded files.
    File uploaders should be only accessible to authenticated and authorised users if possible.
    Write permission should be removed from files and folders other than the upload folders. The upload folders should not serve any
    Ensure that configuration files such as “.htaccess” or “web.config” cannot be replaced using file uploaders. Ensure that appropriate settings are available to ignore the “.htaccess” or “web.config” files if uploaded in the upload directories.
    Ensure that files with double extensions (e.g. “file.php.txt”) cannot be executed especially in Apache.
    Ensure that uploaded files cannot be accessed by unauthorised users.
    Adding the “Content-Disposition: Attachment” and “X-Content-Type-Options: nosniff” headers to the response of static files will secure the website against Flash or PDF-based cross-site content-hijacking attacks. It is recommended that this practice be performed for all of the files that users need to download in all the modules that deal with a file download. Although this method does not fully secure the website against attacks using Silverlight or similar objects, it can mitigate the risk of using Adobe Flash and PDF objects, especially when uploading PDF files is permitted.
    Flash/PDF (crossdomain.xml) or Silverlight (clientaccesspolicy.xml) cross-domain policy files should be removed if they are not in use and there is no business requirement for Flash or Silverlight applications to communicate with the website.
    Browser caching should be disabled for the corssdomain.xml and clientaccesspolicy.xml files. This enables the website to easily update the file or restrict access to the Web services if necessary. Once the client access policy file is checked, it remains in effect for the browser session so the impact of non-caching to the end-user is minimal. This can be raised as a low or informational risk issue based on the content of the target website and security and complexity of the policy file(s).
    CORS headers should be reviewed to only be enabled for static or publicly accessible data. Otherwise, the “Access-Control-Allow-Origin” header should only contain authorised addresses. Other CORS headers such as “Access-Control-Allow-Credentials” should only be used when they are required. Items within the CORS headers such as “Access-Control-Allow-Methods” or “Access-Control-Allow-Headers” should be reviewed and removed if they are not required.
"
1,Improper Restriction of Operations within the Bounds of a Memory Buffer,"The software performs operations on a memory buffer, but it can read from or write to a memory location that is outside of the intended boundary of the buffer.",High,d
12,Out-of-bounds Write,"The software writes data past the end, or before the beginning, of the intended buffer.",High,"The ability to detect buffer overflow vulnerabilities in source code is certainly valuable. However, eliminating them from a code base requires consistent detection as well as a familiarity with secure practices for buffer handling. The easiest way to prevent these vulnerabilities is to simply use a language that does not allow for them. C allows these vulnerabilities through direct access to memory and a lack of strong object typing. Languages that do not share these aspects are typically immune. Java, Python, and .NET, among other languages and platforms, don’t require special checks or changes to mitigate overflow vulnerabilities."
15,Incorrect Permission Assignment for Critical Resource,The software specifies permissions for a security-critical resource in a way that allows that resource to be read or modified by unintended actors.,High,"Use monitoring tools that examine the software's process as it interacts with the operating system and the network. This technique is useful in cases when source code is unavailable, if the software was not developed by you, or if you want to verify that the build phase did not introduce any new weaknesses. Examples include debuggers that directly attach to the running process; system-call tracing utilities such as truss (Solaris) and strace (Linux); system activity monitors such as FileMon, RegMon, Process Monitor, and other Sysinternals utilities (Windows); and sniffers and protocol analyzers that monitor network traffic"
13,Improper Authentication,"When an actor claims to have a given identity, the software does not prove or insufficiently proves that the claim is correct.",High,"Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.

Consider using libraries with authentication capabilities such as OpenSSL or the ESAPI Authenticator"
9,Cross-Site Request Forgery (CSRF),"The web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request.",Medium,"ecurity experts propose many CSRF prevention mechanisms. This includes, for example, using a referer header, using the HttpOnly flag, sending an X-Requested-With custom header using jQuery, and more. Unfortunately, not all of them are effective in all scenarios. In some cases, they are ineffective and in other cases, they are difficult to implement in a particular application or have side effects. The following implementations prove to be effective for a variety of web apps while still providing protection against CSRF attacks. For more advanced CSRF prevention options, see the CSRF prevention cheat sheet managed by OWASP."
8,Integer Overflow or Wraparound,"The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.",Medium,"For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server"
10,Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),"The software uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the software does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.",High,"Store library, include, and utility files outside of the web document root, if possible. Otherwise, store them in a separate directory and use the web server's access control capabilities to prevent attackers from directly requesting them. One common practice is to define a fixed constant in each calling program, then check for the existence of the constant in the library/include file; if the constant does not exist, then the file was directly requested, and it can exit immediately.

This significantly reduces the chance of an attacker being able to bypass any protection mechanisms that are in the base program but not in the include files. It will also reduce the attack surface"
7,Use After Free,"Referencing memory after it has been freed can cause a program to crash, use unexpected values, or execute code.",High,Updates are available. Please see the references or vendor advisory for more information.
11,Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection'),"The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component.",High,"Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations. "
5,Out-of-bounds Read,"The software reads data past the end, or before the beginning, of the intended buffer.",None,Use a language that provides appropriate memory abstractions
6,Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection'),"The software constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component.",High,"When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues. "
24,Improper Privilege Management,"The software does not properly assign, modify, track, or check privileges for an actor, creating an unintended sphere of control for that actor.",Medium,Follow the principle of least privilege when assigning access rights to entities in a software system
25,Improper Certificate Validation,"The software does not validate, or incorrectly validates, a certificate.",None,Certificates should be carefully managed and checked to assure that data are encrypted with the intended owner's public key. 
14,NULL Pointer Dereference,"A NULL pointer dereference occurs when the application dereferences a pointer that it expects to be valid, but is NULL, typically causing a crash or exit.",Medium,"Identify all variables and data stores that receive information from external sources, and apply input validation to make sure that they are only initialized to expected values."
23,Deserialization of Untrusted Data,The application deserializes untrusted data without sufficiently verifying that the resulting data will be valid.,Medium,"Make fields transient to protect them from deserialization.

An attempt to serialize and then deserialize a class containing transient fields will result in NULLs where the transient data should be. This is an excellent way to prevent time, environment-based, or sensitive variables from being carried over and used improperly. "
21,Missing Release of Resource after Effective Lifetime,"The software does not release a resource after its effective lifetime has ended, i.e., after the resource is no longer needed.",High,"It is good practice to be responsible for freeing all resources you allocate and to be consistent with how and where you free resources in a function. If you allocate resources that you intend to free upon completion of the function, you must be sure to free the resources at all exit points for that function including error conditions"
20,Uncontrolled Resource Consumption,"The software does not properly control the allocation and maintenance of a limited resource thereby enabling an actor to influence the amount of resources consumed, eventually leading to the exhaustion of available resources.",High,Ensure that protocols have specific limits of scale placed on them. 
22,Untrusted Search Path,The application searches for critical resources using an externally-supplied search path that can point to resources that are not under the application's direct control.,High,"Check your search path before use and remove any elements that are likely to be unsafe, such as the current working directory or a temporary files directory. "
4,Information Exposure,An information exposure is the intentional or unintentional disclosure of information to an actor that is not explicitly authorized to have access to that information.,High,"Compartmentalize the system to have ""safe"" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.

Ensure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges. "
2,Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting'),The software does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.,High,"Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth."
19,Use of Hard-coded Credentials,"The software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data.",High,"If the software must contain hard-coded credentials or they cannot be removed, perform access control checks and limit which entities can access the feature that requires the hard-coded credentials. For example, a feature might only be enabled through the system console instead of through a network connection. "
3,Improper Input Validation,The product does not validate or incorrectly validates input that can affect the control flow or data flow of a program.,High,"Be especially careful to validate all input when invoking code that crosses language boundaries, such as from an interpreted language to native code. This could create an unexpected interaction between the language boundaries. Ensure that you are not violating any of the expectations of the language with which you are interfacing. For example, even though Java may not be susceptible to buffer overflows, providing a large argument in a call to native code might trigger an overflow. "
26,Injection.,"Injection flaws, such as SQL, NoSQL, OS, and LDAP injection, occur when untrusted data is sent to an interpreter as part of a command or query. The attacker’s hostile data can trick the interpreter into executing unintended commands or accessing data without proper authorization.",High,"    The preferred option is to use a safe API, which avoids the use of the interpreter entirely or provides a parameterized interface, or migrate to use Object Relational Mapping Tools (ORMs). Note: Even when parameterized, stored procedures can still introduce SQL injection if PL/SQL or T-SQL concatenates queries and data, or executes hostile data with EXECUTE IMMEDIATE or exec().
    Use positive or “whitelist” server-side input validation. This is not a complete defense as many applications require special characters, such as text areas or APIs for mobile applications.
    For any residual dynamic queries, escape special characters using the specific escape syntax for that interpreter. Note: SQL structure such as table names, column names, and so on cannot be escaped, and thus user-supplied structure names are dangerous. This is a common issue in report-writing software.
    Use LIMIT and other SQL controls within queries to prevent mass disclosure of records in case of SQL injection.
"
27,Broken Authentication.,"Application functions related to authentication and session management are often implemented incorrectly, allowing attackers to compromise passwords, keys, or session tokens, or to exploit other implementation flaws to assume other users’ identities temporarily or permanently.",Medium,"    Where possible, implement multi-factor authentication to prevent automated, credential stuffing, brute force, and stolen credential re-use attacks.
    Do not ship or deploy with any default credentials, particularly for admin users.
    Implement weak-password checks, such as testing new or changed passwords against a list of the top 10000 worst passwords.
    Align password length, complexity and rotation policies with NIST 800-63 B’s guidelines in section 5.1.1 for Memorized Secrets or other modern, evidence based password policies.
    Ensure registration, credential recovery, and API pathways are hardened against account enumeration attacks by using the same messages for all outcomes.
    Limit or increasingly delay failed login attempts. Log all failures and alert administrators when credential stuffing, brute force, or other attacks are detected.
    Use a server-side, secure, built-in session manager that generates a new random session ID with high entropy after login. Session IDs should not be in the URL, be securely stored and invalidated after logout, idle, and absolute timeouts.
"
28,Sensitive Data Exposure.," Many web applications and APIs do not properly protect sensitive data, such as financial, healthcare, and PII. Attackers may steal or modify such weakly protected data to conduct credit card fraud, identity theft, or other crimes. Sensitive data may be compromised without extra protection, such as encryption at rest or in transit, and requires special precautions when exchanged with the browser.",Medium,"    Classify data processed, stored or transmitted by an application. Identify which data is sensitive according to privacy laws, regulatory requirements, or business needs.
    Apply controls as per the classification.
    Don’t store sensitive data unnecessarily. Discard it as soon as possible or use PCI DSS compliant tokenization or even truncation. Data that is not retained cannot be stolen.
    Make sure to encrypt all sensitive data at rest.
    Ensure up-to-date and strong standard algorithms, protocols, and keys are in place; use proper key management.
    Encrypt all data in transit with secure protocols such as TLS with perfect forward secrecy (PFS) ciphers, cipher prioritization by the server, and secure parameters. Enforce encryption using directives like HTTP Strict Transport Security (HSTS).
    Disable caching for response that contain sensitive data.
    Store passwords using strong adaptive and salted hashing functions with a work factor (delay factor), such as Argon2, scrypt, bcrypt or PBKDF2.
    Verify independently the effectiveness of configuration and settings.
"
29,XML External Entities (XXE).,"Many older or poorly configured XML processors evaluate external entity references within XML documents. External entities can be used to disclose internal files using the file URI handler, internal file shares, internal port scanning, remote code execution, and denial of service attacks.",Medium,"    Whenever possible, use less complex data formats such as JSON, and avoiding serialization of sensitive data.
    Patch or upgrade all XML processors and libraries in use by the application or on the underlying operating system. Use dependency checkers. Update SOAP to SOAP 1.2 or higher.
    Disable XML external entity and DTD processing in all XML parsers in the application, as per the OWASP Cheat Sheet ‘XXE Prevention’.
    Implement positive (“whitelisting”) server-side input validation, filtering, or sanitization to prevent hostile data within XML documents, headers, or nodes.
    Verify that XML or XSL file upload functionality validates incoming XML using XSD validation or similar.
    SAST tools can help detect XXE in source code, although manual code review is the best alternative in large, complex applications with many integrations.
"
30,Broken Access Control.,"Restrictions on what authenticated users are allowed to do are often not properly enforced. Attackers can exploit these flaws to access unauthorized functionality and/or data, such as access other users’ accounts, view sensitive files, modify other users’ data, change access rights, etc.",Medium,"    With the exception of public resources, deny by default.
    Implement access control mechanisms once and re-use them throughout the application, including minimizing CORS usage.
    Model access controls should enforce record ownership, rather than accepting that the user can create, read, update, or delete any record.
    Unique application business limit requirements should be enforced by domain models.
    Disable web server directory listing and ensure file metadata (e.g. .git) and backup files are not present within web roots.
    Log access control failures, alert admins when appropriate (e.g. repeated failures).
    Rate limit API and controller access to minimize the harm from automated attack tooling.
    JWT tokens should be invalidated on the server after logout.
"
31,Security Misconfiguration.,"Security misconfiguration is the most commonly seen issue. This is commonly a result of insecure default configurations, incomplete or ad hoc configurations, open cloud storage, misconfigured HTTP headers, and verbose error messages containing sensitive information. Not only must all operating systems, frameworks, libraries, and applications be securely configured, but they must be patched/upgraded in a timely fashion.",High,"    A repeatable hardening process that makes it fast and easy to deploy another environment that is properly locked down. Development, QA, and production environments should all be configured identically, with different credentials used in each environment. This process should be automated to minimize the effort required to setup a new secure environment.
    A minimal platform without any unnecessary features, components, documentation, and samples. Remove or do not install unused features and frameworks.
    A task to review and update the configurations appropriate to all security notes, updates and patches as part of the patch management process (see A9:2017-Using Components with Known Vulnerabilities). In particular, review cloud storage permissions (e.g. S3 bucket permissions).
    A segmented application architecture that provides effective, secure separation between components or tenants, with segmentation, containerization, or cloud security groups (ACLs).
    Sending security directives to clients
    An automated process to verify the effectiveness of the configurations and settings in all environments.
"
32,Cross-Site Scripting XSS,"XSS flaws occur whenever an application includes untrusted data in a new web page without proper validation or escaping, or updates an existing web page with user-supplied data using a browser API that can create HTML or JavaScript. XSS allows attackers to execute scripts in the victim’s browser which can hijack user sessions, deface web sites, or redirect the user to malicious sites.",High,"    Using frameworks that automatically escape XSS by design, such as the latest Ruby on Rails, React JS. Learn the limitations of each framework’s XSS protection and appropriately handle the use cases which are not covered.
    Escaping untrusted HTTP request data based on the context in the HTML output (body, attribute, JavaScript, CSS, or URL) will resolve Reflected and Stored XSS vulnerabilities. The OWASP Cheat Sheet ‘XSS Prevention’ has details on the required data escaping techniques.
    Applying context-sensitive encoding when modifying the browser document on the client side acts against DOM XSS. When this cannot be avoided, similar context sensitive escaping techniques can be applied to browser APIs as described in the OWASP Cheat Sheet ‘DOM based XSS Prevention’.
    Enabling a Content Security Policy (CSP) as a defense-in-depth mitigating control against XSS. It is effective if no other vulnerabilities exist that would allow placing malicious code via local file includes (e.g. path traversal overwrites or vulnerable libraries from permitted content delivery networks).
"
33,Insecure Deserialization.,"Insecure deserialization often leads to remote code execution. Even if deserialization flaws do not result in remote code execution, they can be used to perform attacks, including replay attacks, injection attacks, and privilege escalation attacks.",Medium,"    Implementing integrity checks such as digital signatures on any serialized objects to prevent hostile object creation or data tampering.
    Enforcing strict type constraints during deserialization before object creation as the code typically expects a definable set of classes. Bypasses to this technique have been demonstrated, so reliance solely on this is not advisable.
    Isolating and running code that deserializes in low privilege environments when possible.
    Log deserialization exceptions and failures, such as where the incoming type is not the expected type, or the deserialization throws exceptions.
    Restricting or monitoring incoming and outgoing network connectivity from containers or servers that deserialize.
    Monitoring deserialization, alerting if a user deserializes constantly.
"
34,Using Components with Known Vulnerabilities. ,"Components, such as libraries, frameworks, and other software modules, run with the same privileges as the application. If a vulnerable component is exploited, such an attack can facilitate serious data loss or server takeover. Applications and APIs using components with known vulnerabilities may undermine application defenses and enable various attacks and impacts.",Medium,"    Remove unused dependencies, unnecessary features, components, files, and documentation.
    Continuously inventory the versions of both client-side and server-side components (e.g. frameworks, libraries) and their dependencies using tools like versions, DependencyCheck, retire.js, etc. Continuously monitor sources like CVE and NVD for vulnerabilities in the components. Use software composition analysis tools to automate the process. Subscribe to email alerts for security vulnerabilities related to components you use.
    Only obtain components from official sources over secure links. Prefer signed packages to reduce the chance of including a modified, malicious component.
    Monitor for libraries and components that are unmaintained or do not create security patches for older versions. If patching is not possible, consider deploying a virtual patch to monitor, detect, or protect against the discovered issue.
"
35,Insufficient Logging & Monitoring.,"Insufficient logging and monitoring, coupled with missing or ineffective integration with incident response, allows attackers to further attack systems, maintain persistence, pivot to more systems, and tamper, extract, or destroy data. Most breach studies show time to detect a breach is over 200 days, typically detected by external parties rather than internal processes or monitoring.",Medium,"    Ensure all login, access control failures, and server-side input validation failures can be logged with sufficient user context to identify suspicious or malicious accounts, and held for sufficient time to allow delayed forensic analysis.
    Ensure that logs are generated in a format that can be easily consumed by a centralized log management solutions.
    Ensure high-value transactions have an audit trail with integrity controls to prevent tampering or deletion, such as append-only database tables or similar.
    Establish effective monitoring and alerting such that suspicious activities are detected and responded to in a timely fashion.
    Establish or adopt an incident response and recovery plan, such as NIST 800-61 rev 2 or later.
"
